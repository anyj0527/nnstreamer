name: Build test / Yocto 5.0.3 (kirkstone-5.0.3)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  build:
    name: Build with Yocto devtool on Ubuntu
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: -${{ github.event.pull_request.commits }}
    - name: Check if rebuild required
      uses: ./.github/actions/check-rebuild
      with:
        mode: build

    - name: make cache dir for yocto
      ## prevent permission error
      run: sudo mkdir --mode a=rwx --parents /var/cache/yocto

    - name: get date
      id: get-date
      run: |
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: cache yocto sstate and downloads
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/yocto/downloads
          /var/cache/yocto/sstate-cache
          /var/cache/yocto/persistent
        key: yocto-cache-yocto-5.0.3-${{ steps.get-date.outputs.date }}
        restore-keys: |
          yocto-cache-yocto-

    ## @todo Make cache works (daily update cache on main branch / restore the cache on each PR (not saving))
    - name: Prepare build
      # if: env.rebuild == '1'
      run: |
        echo "::group::apt-get install"
        sudo apt-get update
        sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 python3-subunit zstd liblz4-tool file locales libacl1
        pip install websockets
        echo "::endgroup::"
        echo "::group::Locale Setup"
        sudo locale-gen en_US.UTF-8
        echo "::endgroup::"
        echo "::group::Prepare poky and meta-neural-network"
        git clone git://git.yoctoproject.org/poky -b yocto-5.0.3 && cd poky
        git clone https://github.com/anyj0527/meta-neural-network -b scarthgap
        rm -rf meta-neural-network/recipes-tensorflow/
        echo 'SRC_URI = "git://${{ github.workspace }};protocol=file;usehead=1"' >> meta-neural-network/recipes-nnstreamer/nnstreamer/nnstreamer_%.bbappend
        source oe-init-build-env
        bitbake-layers add-layer ../meta-neural-network
        echo "::endgroup::"
        echo "::group::Set local.conf"
        echo 'DL_DIR = "/var/cache/yocto/downloads"' >> conf/local.conf
        echo 'BB_GENERATE_MIRROR_TARBALLS = "1"' >> conf/local.conf
        echo 'SSTATE_DIR = "/var/cache/yocto/sstate-cache"' >> conf/local.conf
        echo 'BB_SIGNATURE_HANDLER = "OEEquivHash"' >> conf/local.conf
        echo 'BB_HASHSERVE = "auto"' >> conf/local.conf
        echo 'BB_HASHSERVE_UPSTREAM = "wss://hashserv.yoctoproject.org/ws"' >> conf/local.conf
        echo 'SSTATE_MIRRORS ?= "file://.* http://cdn.jsdelivr.net/yocto/sstate/all/PATH;downloadfilename=PATH"' >> conf/local.conf
        echo 'PERSISTENT_DIR="/var/cache/yocto/persistent"' >> conf/local.conf
        bitbake --setscene-only nnstreamer || true
        bitbake --skip-setscene nnstreamer
        echo "::endgroup::"
    # - name: Build
    #   # if: env.rebuild == '1'
    #   run: |
    #     bitbake nnstreamer

    - name: save yocto cache
      uses: actions/cache/save@v4
      if: always()
      with:
        path: |
          /var/cache/yocto/downloads
          /var/cache/yocto/sstate-cache
          /var/cache/yocto/persistent
        key: yocto-cache-yocto-5.0.3-${{ steps.get-date.outputs.date }}
